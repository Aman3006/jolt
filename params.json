{"name":"Jolt","tagline":"JSON to JSON transformation library written in Java.","body":"Jolt\r\n========\r\n\r\nJSON to JSON transformation library written in Java where the \"specification\" for the transform is itself a JSON document.\r\n\r\n### Useful For\r\n\r\n1. Transforming JSON data from ElasticSearch, MongoDb, Cassandra, etc before sending it off to the world\r\n1. Extracting data from a large JSON documents for your own consumption\r\n\r\n## Table of Contents\r\n\r\n   * [1 Overview](#Overview)\r\n   * [2 Documentation](#Documentation)\r\n   * [3 Shiftr Transform DSL](#Shiftr_Transform_DSL)\r\n   * [4 Demo](#Demo)\r\n   * [5 Getting Started](#Getting_Started)\r\n   * [6 Getting Transform Help](#Getting_Transform_Help)\r\n   * [7 Alternatives](#Alternatives)\r\n   * [8 Performance](#Performance)\r\n   * [9 CLI](#CLI)\r\n   * [10 Code Coverage](#Code_Coverage)\r\n   * [11 Release Notes](#Release_Notes)\r\n\r\n## <a name=\"Overview\"></a> Overview\r\n\r\nJolt :\r\n\r\n* provides a set of transforms, that can be \"chained\" together to form the overall JSON to JSON transform.\r\n* focuses on transforming the *structure* of your JSON data, not manipulating specific values\r\n    * The idea being: use Jolt to get most of the structure right, then write code to fix values\r\n* consumes and produces \"hydrated\" JSON : in-memory tree of Maps, Lists, Strings, etc.\r\n    * use Jackson (or whatever) to serialize and deserialize the JSON text\r\n\r\n### Stock Transforms\r\n\r\nThe Stock transforms are:\r\n\r\n    shift       : copy data from the input tree and put it the output tree\r\n    default     : apply default values to the tree\r\n    remove      : remove data from the tree\r\n    sort        : sort the Map key values alphabetically ( for debugging and human readability )\r\n    cardinality : \"fix\" the cardinality of input data.  Eg, the \"urls\" element is usually a List, but if there is only one, then it is a String\r\n\r\nEach transform has it's own DSL (Domain Specific Language) in order to facilitate it's narrow job.\r\n\r\nCurrently, all the Stock transforms just effect the \"structure\" of the data.\r\nTo do data manipulation, you will need to write Java code.   If you write your Java \"data manipulation\" code to implement the Transform interface, then you can insert your code in the transform chain.\r\n\r\nThe out-of-the-box Jolt transforms should be able to do most of your structural transformation, with custom Java Transforms implementing your data manipulation.\r\n\r\n## <a name=\"Documentation\"></a> Documentation\r\n\r\nJolt [Slide Deck](https://docs.google.com/presentation/d/1sAiuiFC4Lzz4-064sg1p8EQt2ev0o442MfEbvrpD1ls/edit?usp=sharing) : covers motivation, development, and transforms.\r\n\r\nJavadoc explaining each transform DSL :\r\n\r\n* [shift](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/Shiftr.java)\r\n* [default](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/Defaultr.java)\r\n* [remove](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/Removr.java)\r\n* [sort](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/Sortr.java)\r\n* full qualified Java ClassName : Class implements the Transform or ContextualTransform interfaces, and can optionally be SpecDriven (marker interface)\r\n    * [Transform](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/Transform.java) interface\r\n    * [SpecDriven](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/SpecDriven.java)\r\n        * where the \"input\" is \"hydrated\" Java version of your JSON Data\r\n\r\nRunning a Jolt transform means creating an instance of [Chainr](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/Chainr.java)  with a list of transforms.\r\n\r\nThe JSON spec for Chainr looks like : [unit test](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/test/resources/json/chainr/firstSample.json).\r\n\r\nThe Java side looks like :\r\n\r\n    Chainr chainr = JsonUtils.classpathToList( \"/path/to/chainr/spec.json\" );\r\n\r\n    Object input = elasticSearchHit.getSource(); // ElasticSearch already returns hydrated JSon\r\n\r\n    Object output = chainr.transform( input );\r\n\r\n    return output;\r\n\r\n### <a name=\"Shiftr_Transform_DSL\"></a> Shiftr Transform DSL\r\n\r\nThe Shiftr transform generally does most of the \"heavy lifting\" in the transform chain.\r\nTo see the Shiftr DSL in action, please look at our unit tests ([shiftr tests](https://github.com/bazaarvoice/jolt/tree/master/jolt-core/src/test/resources/json/shiftr)) for nice bite sized transform examples, and read the extensive Shiftr [javadoc](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/main/java/com/bazaarvoice/jolt/Shiftr.java).\r\n\r\nOur unit tests follow the pattern :\r\n\r\n    {\r\n        \"input\": {\r\n            // sample input\r\n        },\r\n\r\n        \"spec\": {\r\n            // transform spec\r\n        },\r\n\r\n        \"expected\": {\r\n            // what the output of the transform looks like\r\n        }\r\n    }\r\n\r\nWe read in \"input\", apply the \"spec\", and [Diffy](https://github.com/bazaarvoice/jolt/blob/master/json-utils/src/main/java/com/bazaarvoice/jolt/Diffy.java) it against the \"expected\".\r\n\r\nTo learn the Shiftr DSL, examine \"input\" and \"output\" json, get an understanding of how data is moving, and *then* look at the transform spec to see how it facilitates the transform.\r\n\r\nFor reference, [this](https://github.com/bazaarvoice/jolt/blob/master/jolt-core/src/test/resources/json/shiftr/firstSample.json) was the very first test we wrote.\r\n\r\n\r\n## <a name=\"Demo\"></a> Demo\r\n\r\nThere is a demo available at [jolt-demo.appspot.com](http://jolt-demo.appspot.com/).\r\nYou can paste in JSON input data and a Spec, and it will post the data to server and run the transform.\r\n\r\nNote\r\n\r\n* it is hosted on a free Google App Engine instance, so it may take a minute to spin up.\r\n* it validates in input JSON and spec client side, but if there are any errors server side it just silently fails.\r\n\r\n## <a name=\"Getting_Started\"></a> Getting Started\r\n\r\nGetting started code wise has it's [own doc](gettingStarted.md).\r\n\r\n## <a name=\"Getting_Transform_Help\"></a> Getting Transform Help\r\n\r\nIf you can't get a transform working and you need help, create and Issue in Jolt (for now).\r\n\r\nMake sure you include what your \"input\" is, and what you want your \"output\" to be.\r\n\r\n## <a name=\"Alternatives\"></a> Alternatives\r\n\r\nAside from writing your own custom code to do a transform, there are two general approaches to doing Json to Json transforms in Java.\r\n\r\n1) JSON -> XML -> XSLT or STX -> XML -> JSON\r\n\r\nAside from being a Rube Goldberg approach, XSLT is more complicated than Jolt because it is trying to do the whole transform with a single DSL.\r\n\r\n2) Write a Template (Velocity, FreeMarker, etc) that take hydrated JSON input and write textual JSON output\r\n\r\nWith this approach you are working from the output format backwards to the input, which is complex for any non-trivial transform.\r\nEg, the structure of your template will be dictated by the output JSON format, and you will end up coding a parallel tree walk of the input data and the output format in your template.\r\nJolt works forward from the input data to the output format which is simpler, and it does the parallel tree walk for you.\r\n\r\n## <a name=\"Performance\"></a> Performance\r\n\r\nThe primary goal of Jolt was to improve \"developer speed\" by providing the ability to have a declarative rather than imperative transforms.\r\nThat said, Jolt should have a better runtime than the alternatives listed above.\r\n\r\nWork has been done to make the stock Jolt transforms fast:\r\n\r\n1. Transforms can be initialized once with their spec, and re-used many times in a multi-threaded environment.\r\n    * We reuse initialized Jolt transforms to service multiple web requests from a DropWizard service.\r\n2. \"*\" wildcard logic was redone to reduce the use of Regex in the common case, which was a dramatic speed improvement.\r\n3. The parallel tree walk performed by Shiftr was optimized.\r\n\r\nTwo things to be aware of :\r\n\r\n1. Jolt is not \"stream\" based, so if you have a very large Json document to transform you need to have enough memory to hold it.\r\n2. The transform process will create and discard a lot of objects, so the garbage collector will have work to do.\r\n\r\n## <a name=\"CLI\"></a> Jolt CLI\r\n\r\nJolt Transforms and tools can be run from the command line. Command line interface doc [here](cli/README.md).\r\n\r\n## <a name=\"Code_Coverage\"></a> Code Coverage\r\n\r\n[![Build Status](https://secure.travis-ci.org/bazaarvoice/jolt.png)](http://travis-ci.org/bazaarvoice/jolt)\r\n\r\nFor the moment we have Cobertura configured in our poms.\r\nWhen we move to a proper open source CI build, this can go away.\r\n\r\n    mvn cobertura:cobertura\r\n    open jolt-core/target/site/cobertura/index.html\r\n\r\nCurrently code coverage is at 89% line, and 81% branch.\r\n\r\n## <a name=\"Release_Notes\"></a> Release Notes\r\n\r\n[Versions and Release Notes available here](https://github.com/bazaarvoice/jolt/releases).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}